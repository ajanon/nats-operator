name: Build & Test

on:
  workflow_dispatch:
    inputs:
      scope:
        type: choice
        description: 'Scope the workflow should run with. Allowed values are: all, build-only, test-only'
        default: 'all'
        options:
          - all
          - build-only
  workflow_call:
    inputs:
      scope:
        type: string
        description: 'Scope the workflow should run with. Allowed values are: all, build-only'
        default: 'all'

jobs:
  static-and-unit-tests:
    name: Static & Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install dependencies
        run: python3 -m pip install tox
      - name: Run linters
        run: tox -e lint
      - name: Run tests
        run: tox -e unit

  collect-platforms:
    name: Collect supported platforms for charm
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: Assign charm artifacts to runners
      id: charm-to-runner
      run: |
        # Reverse lookup for artifact base index to its architecture
        ./scripts/get-runners.py
    outputs:
      platforms: ${{ steps.charm-to-runner.outputs.platforms }}

  build:
    name: 'Build ${{ matrix.platform.charm_name }}-${{ matrix.platform.version }}-${{ matrix.platform.arch }}'
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.collect-platforms.outputs.platforms) }}
    needs:
      - collect-platforms
      - static-and-unit-tests
    env:
      CRAFT_SHARED_CACHE: /tmp/charmcraft
    runs-on: ["self-hosted", "linux", "${{ matrix.platform.arch == 'amd64' && 'X64' || 'ARM64' }}", "jammy", "large"]
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup LXD
        uses: canonical/setup-lxd@54a5806e490d92e207b57183cf111ed54bbdeff4 # v0.1.2
        with:
          channel: 5.21/stable
      - name: Install charmcraft
        run: sudo snap install --classic --channel=latest/stable charmcraft
      - name: Cache Deps
        id: cache-charm-deps
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
        with:
          path: ${{ env.CRAFT_SHARED_CACHE }}/**
          key: charm-deps-${{ matrix.platform.arch }}-${{ hashFiles('**/requirements.txt') }}
      - name: Build charm
        id: build_charm
        run: |
            platform=ubuntu@${{ matrix.platform.version }}:${{ matrix.platform.arch }}
            charmcraft pack --platform="$platform" \
                    --verbose
            # Make the created cache dir accessible by user to enable it to be
            # cached later on
            sudo chown -R $(whoami) ${CRAFT_SHARED_CACHE}
      - name: Upload charmcraft logs
        if: failure()
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
        with:
          name: logs-charmcraft-build-base-${{ matrix.platform.charm_name }}-${{ matrix.platform.version }}-${{ matrix.platform.arch }}
          path: ~/.local/state/charmcraft/log/
          if-no-files-found: error
      - name: Upload charm package
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
        with:
          name: ${{ matrix.platform.charm_name }}-charm-${{ matrix.platform.version }}-${{ matrix.platform.arch }}
          # .empty file required to preserve directory structure
          # See https://github.com/actions/upload-artifact/issues/344#issuecomment-1379232156
          path: |
            ./*.charm
          if-no-files-found: error

  integration-test:
    name: Integration tests
    if: inputs.scope != 'build-only'
    needs:
      - static-and-unit-tests
      - collect-platforms
      - build
    strategy:
      fail-fast: false
      max-parallel: 6
      matrix:
        juju-version:
          - "3.5"  # renovate: latest juju 3
          - "2.9"  # renovate: latest juju 2
        platform: ${{ fromJSON(needs.collect-platforms.outputs.platforms) }}
    runs-on: ["self-hosted", "linux", "${{ matrix.platform.arch == 'amd64' && 'X64' || 'ARM64' }}", "${{ matrix.platform.version == '22.04' && 'jammy' || 'noble' }}", "large"]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Download packed charm(s)
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
        id: downloaded-charm
        with:
          name: ${{ matrix.platform.charm_name }}-charm-${{ matrix.platform.version }}-${{ matrix.platform.arch }}
      - name: Set channel
        run: |
          juju_channel=$(echo "${{ matrix.juju-version }}" | cut -c 1-3)
          echo "JUJU_CHANNEL=${juju_channel}/stable" >> "$GITHUB_ENV"
          echo "JUJU_VERSION=${{ matrix.juju-version }}" >> "$GITHUB_ENV"
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: lxd
          juju-channel: "${{ env.JUJU_CHANNEL }}"
      - name: Run integration tests
        run: |
          # Only run integration test on jammy until we have all nats-operator charms supported running on noble and published to the store.
          if [ "${{ matrix.platform.version }}" == "24.04" ]; then
            echo "Disable integration test on noble until nats-operator charms supported running on noble and published to the store."
            exit 0
          fi
          if [ "${{ matrix.platform.arch }}" == "arm64" ]; then
            args+="--constraints arch=arm64"
          fi
          ls *.charm | xargs -I {} ./scripts/run-integration-tests --charm=./{} ${args}

